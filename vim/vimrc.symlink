set nocompatible

syntax enable

" Colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"  " Fixes tmux 24-bit color issues
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"  " Fixes tmux 24-bit color issues
set termguicolors                       " Enable 24-bit color
set background=dark
colorscheme gruvbox

" Airline
let g:airline_theme='one'
"   - Don't use powerline font separator symbols
"   - Set up some sensible symbols
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_right_sep = ''
" let g:airline_symbols.branch = 'âŒ¥'
" let g:airline_symbols.readonly = 'â›”'
" let g:airline_symbols.linenr = 'ðŸ”¢'

set antialias
set wrap
set ruler
set shiftwidth=2
set nofoldenable
set history=200

" Don't highlight search matches
set nohlsearch
" Highlight search matches as you type
set incsearch

" Enable backspacing over everything
set backspace=indent,eol,start

"Press F2 to paste in text without indenting
set pastetoggle=<F2>

"mouse support in terminal vim
set mouse=a
set ttyfast
set ttymouse=xterm2

set expandtab
set tabstop=2

" Make splits open in sensible directions
set splitbelow
set splitright

" Use better encryption
set cm=blowfish2

" Show git branch in the status line
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

let mapleader = " "
"let mapleader = ","
"By default ',' is the complement of ';' (repeat last f{char}). So, use a
"different key for that function.
"noremap [ ,

"Abbreviations
imap  ->
imap  =>
" imap  #{
imap  $this->

" Instead of moving the cursor up one line, use -
" to set the current word as the search pattern
" WITHOUT moving the cursor. This makes it easier
" to replace this instance and subsequent instances
" of a word.
nmap - #*

"Text bubbling (requires 'unimpaired' plugin)
" Bubble single lines
nmap <C-k> [e
nmap <C-j> ]e
" Bubble multiple lines
vmap <C-k> [egv
vmap <C-j> ]egv

" preserve visual selection when indenting/outdenting
vmap > >gv
vmap < <gv

"Suppress Syntastic whining (in JS ES6 source code)
map <Leader>st :SyntasticToggleMode<CR>

"NERDTree
map <Leader>nt :NERDTreeToggle<CR>
map <Leader>nf :NERDTreeFind<CR>

" Refresh NERDTree pane
"
" ensure NrrwRgn doesn't map ,nr
" https://github.com/chrisbra/NrrwRgn/issues/52
let g:nrrw_rgn_nomap_nr = 1

nmap <leader>nr :NERDTreeFocus<cr> \| R \| <c-w><c-p>
" Zoom the NERDTree pane
nmap <leader>na :NERDTree<cr>A<c-w><c-p>
" Unzoom the NERDTree pane
nmap <leader>nn :NERDTree<cr><c-w><c-p>

" Better tab completion of vim commands
set wildmenu

" start scrolling 3 lines from top/bottom
set scrolloff=3

"Ignore some files
let NERDTreeIgnore=['\.class$']
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.class

"UltiSnips
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<C-b>"
let g:UltiSnipsJumpForwardTrigger="<C-b>"
map <leader>ls :echo UltiSnips_ListSnippets()<CR>
map <leader>us :UltiSnipsEdit<CR>

"New tab
map <Leader>tn :tabnew<CR>

"Fugitive shortcuts
map <Leader>gs :Gstatus<CR>
map <Leader>gw :Gwrite<CR>
map <Leader>gc :Gcommit<CR>

"tabularize
map <Leader>a: :Tabularize /:\zs<CR>
map <Leader>ac  [ :Tabularize /:\zs<CR>kdd
map <Leader>a, :Tabularize /,\zs<CR>
map <Leader>a= :Tabularize /=<CR>
map <Leader>af :Tabularize /=><CR>
map <Leader>a{ :Tabularize /{<CR>:Tabularize /}<CR>

"tslime mappings
nmap <Leader>gx :Tmux gitx<CR>
nmap <Leader>t :Tmux
nmap <Leader>ct :Tmux ctags -R --exclude=@.ctags_exclude .<CR>
" run ctags
:command! Ctags !touch .ctags_exclude && ctags -R --exclude=@.ctags_exclude .

nmap <C-c>t <Plug>SetTmuxVars

"write current buffer
nmap <Leader>ww :w<CR>

" Support different cursor in insert mode.
if &term == "screen-256color"
  let &t_SI = "\<Esc>[3 q"
  let &t_EI = "\<Esc>[0 q"
endif

"php unit test
map <Leader>ofp :%s/function test/function xtest<CR>''?xtest<CR>x:w<CR>
map <Leader>onp :%s/function xtest/function test/<CR>'':w<CR>

" turn a comment into a php test method
map <Leader>pt <<xxx:s/ /_/gI  function test_A() {}kkk

map <Leader>vd Ovar_dump();<ESC>hi
map <Leader>el Oerror_log(print_r(x, true));<ESC>Fxxi

"Debugging
map <Leader>db Odebugger; 1<CR><ESC>:w<CR>
map <Leader>bb Obyebug; 1<CR><ESC>:w<CR>
map <Leader>bp Obinding.pry ; 1<CR><ESC>:w<CR>
map <Leader>so Osave_and_open_page<CR><ESC>:w<CR>
map <Leader>br Oborder: 2px solid red;<CR><ESC>:w<CR>
map <Leader>ex Oecho "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n";<CR><ESC>:w<CR>

map <Leader>bo :BufOnly<CR>
map <Leader>bd :bd<CR>

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal g`\"" |
\ endif

"Load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

set dictionary+=/usr/share/dict/words
set thesaurus+=/Users/davidsalgado/Documents/mthesaur.txt
au FileType text setlocal complete+=k

" *.md files are Markdown, not Modula2, but I hate the highlighting,
" so open them without syntax highlighting
" au BufRead,BufNewFile *.md set filetype=

" Load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim

" clean up the sign column for git-gutter
highlight clear SignColumn

" make ctrlp use the git project root as its starting directory
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = {
  \ 'file': '\.(class)',
  \ 'dir': '^(.bundle|dot-bundle)'
  \ }
let g:ctrlp_max_files = 10000

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" Ag
" http://robots.thoughtbot.com/faster-grepping-in-vim/
" Use ag over grep
set grepprg=ag\ --nogroup\ --nocolor

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

" edit (e) & source (v) .vimrc
map <Leader>sv :source ~/.vimrc<CR>''
map <Leader>se :e ~/.vimrc<CR>

" use the system clipboard as the default register
" for all yank/cut/put operations
" set clipboard=unnamed

" Copy to/Paste from system clipboard
" Copy line to system clipboard
vmap <Leader>cc "+y
" Copy the whole document to system clipboard
nmap <Leader>ca ggVG"+y
" Insert system clipboard to document
nmap <Leader>cv "+p
" Replace the entire document with the contents of the system clipboard
nmap <Leader>cr ggdG"+p

" Visually select the last yank into this buffer
nmap <Leader>sp '[V']$

" Goto next/previous file from Gstatus pane (assuming only two open panes)
nmap <Leader>gn gg]c
nmap <Leader>gp G[c

" cheat.txt
:command! Cheat sp ~/.dotfiles/vim/cheat.txt

" source .exrc or .vimrc in current folder, on launch
set exrc
" disable shell and filesystem operations from set exrc
set secure

" Additional mappings for surround.vim
" 103 [g] for #{...}
let g:surround_103 = "#{\r}"


" Put tmp files under .vim/tmp
set undodir=~/.vim/tmp/undo/
set undofile
set backupdir=~/.vim/tmp/backup/
set directory=~/.vim/tmp/swap/

" Treat all numbers as decimal, even if they have leading zeros
set nrformats=

" Syntastic
" let g:syntastic_javascript_checkers = ['jsxhint', 'eslint']
let g:syntastic_javascript_checkers = ['eslint']

" C++
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'


" Enable abbreviations in vim-mustache-handlebars
let g:mustache_abbreviations = 1

source ~/.vim/scripts/debug.vim
source ~/.vim/scripts/testrunner.vim
source ~/.vim/scripts/remove_trailing_whitespace.vim
source ~/.vim/scripts/ctrlp.vim
source ~/.vim/scripts/prose.vim

"vim-orgmode
let g:org_heading_shade_leading_stars = 1

"vim-visual-increment
set nrformats=alpha

"Insert mode ctrl key mappings
" a   tmux command prefix
" b   UltiSnips trigger
" c   cancel (same as ESC)
" d
" e
" f
" g   #{
" h   delete
" i   tab
" j   return (same as Ctrl-m ?)
" k   ->
" l   =>
" m   carriage return
" n   go down (in lists)
" o   vim (one normal mode command)
" p   auto-complete
" q
" r   insert from register prefix
" s
" t   $this->
" u   delete to start of line
" v   vim (literal)
" w   delete word backwards
" x   magic insert mode prefix
" y   <%=  %>
" z   bg
